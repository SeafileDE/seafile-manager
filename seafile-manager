#!/bin/bash
#
# Copyright 2015, Alexander Jackson <alexander.jackson@seafile.de>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Uncomment to run in verbose mode
#set -x

# seafile-manager requires C to be used as locale
LANGUAGE=C
LC_ALL=C
LANG=C


# Color coding error messages
PRNTF_FAIL_START="\n\e[1;31m"
PRNTF_FAIL_END="\033[0m"
PRNTF_USAGE_START="\n\e[1;32m"
PRNTF_USAGE_END="\033[0m\n\n"


# Load configuration
PERMS=$(stat ~/.seafile-manager-conf | sed -n '/^Access: (/{s/Access: (\([0-9]\+\).*$/\1/;p}')
if [[ ${PERMS} != 0400 ]]; then echo Permission error. Change form ${PERMS} to 0400 on ~/.seafile-manager-conf and try again.; exit; else . ~/.seafile-manager-conf; fi


# Load functions
. /opt/seafile-manager/inc/account.function
#. /opt/seafile-manager/inc/avatar.function
. /opt/seafile-manager/inc/backup.function
#. /opt/seafile-manager/inc/batch.function
#. /opt/seafile-manager/inc/blocks.function
#. /opt/seafile-manager/inc/directory.function
#. /opt/seafile-manager/inc/file-activities.function
#. /opt/seafile-manager/inc/file.function
. /opt/seafile-manager/inc/fsck.function
#. /opt/seafile-manager/inc/group-and-contacts.function
#. /opt/seafile-manager/inc/group.function
. /opt/seafile-manager/inc/install.function
#. /opt/seafile-manager/inc/library.function
#. /opt/seafile-manager/inc/organizations.function
#. /opt/seafile-manager/inc/server.function
#. /opt/seafile-manager/inc/shared-library.function
#. /opt/seafile-manager/inc/shared-link.function
#. /opt/seafile-manager/inc/star.function
. /opt/seafile-manager/inc/system-infos.function
#. /opt/seafile-manager/inc/thumbnail.function
#. /opt/seafile-manager/inc/upload-file.function


# Cases
(
case "$1" in

check-my-account-info)
    USAGE="Usage: ${0} check-my-account-info"
    printf "${TIMESTAMP} ${0} check-my-account-info "
    check-my-account-info
    ;;

get-account-info)
    USAGE="Usage: ${0} get-account-info foo@foo.com"
    if [[ -z ${2+x} ]]; then printf "${PRNTF_FAIL_START}Error: Account email is missing.${PRNTF_FAIL_END}${PRNTF_USAGE_START}${USAGE}${PRNTF_USAGE_END}"; exit ; fi
    echo ${TIMESTAMP}: ${0} get-account-info ${2}
    get-account-info ${2}
    ;;

create-account)
    USAGE="Usage: ${0} create-account foo@foo.com secret-password"
    if [[ -z ${2+x} ]]; then echo "Account email is missing."; echo "${USAGE}"; exit; fi
    if [[ -z ${3+x} ]]; then echo "Password is missing."; echo "${USAGE}"; exit; fi
    printf "${TIMESTAMP} ${0} create-account ${2} ${3} "
    create-account ${2} ${3}
    ;;

update-password)
    USAGE="Usage: ${0} update-password foo@foo.com secret-password"
    if [[ -z ${2+x} ]]; then echo "Account email missing."; echo "${USAGE}"; exit; fi
    if [[ -z ${3+x} ]]; then echo "Password is missing."; echo "${USAGE}"; exit; fi
    printf "${TIMESTAMP} ${0} update-password ${2} ${3} "
    update-password ${2} ${3}
    ;;

enable-admin)
    USAGE="Usage: ${0} enable-admin foo@foo.com"
    if [[ -z ${2+x} ]]; then echo "Account email missing."; echo "${USAGE}"; exit; fi
    printf "${TIMESTAMP} ${0} enable-admin ${2} "
    enable-admin ${2}
    ;;

disable-admin)
    USAGE="Usage: ${0} disable-admin foo@foo.com"
    if [[ -z ${2+x} ]]; then echo "Account email missing."; echo "${USAGE}"; exit; fi
    printf "${TIMESTAMP} ${0} disable-admin ${2} "
    disable-admin ${2}
    ;;

activate-account)
    USAGE="Usage: ${0} activate-account foo@foo.com"
    if [[ -z ${2+x} ]]; then echo "Account email missing."; echo "${USAGE}"; exit; fi
    printf "${TIMESTAMP} ${0} activate-account ${2} "
    activate-account ${2}
    ;;

deactivate-account)
    USAGE="Usage: ${0} deactivate-account foo@foo.com"
    if [[ -z ${2+x} ]]; then echo "Account email missing."; echo "${USAGE}"; exit; fi
    printf "${TIMESTAMP} ${0} deactivate-account ${2} "
    deactivate-account ${2}
    ;;

migrate-account)
    USAGE="Usage: ${0} migrate-account from-existing-user@foo.com to-existing-user@bar.com"
    if [[ -z ${2+x} ]]; then echo "From account email missing."; echo "${USAGE}"; exit; fi
    if [[ -z ${3+x} ]]; then echo "To account email missing."; echo "${USAGE}"; exit; fi
    printf "${TIMESTAMP} ${0} migrate-account ${2} ${3} "
    migrate-account ${2} ${3}
    ;;

delete-account)
    USAGE="Usage: ${0} delete-account foo@foo.com 'YES,_I_Agree_To_Permanently_Delete_This_Account_And_Are_Willing_To_Loose_All_Data_Associated_With_it!'"
    if [[ -z ${2+x} ]]; then echo "Account email missing."; echo "${USAGE}"; exit; fi
    if [[ ! ${3} = "YES,_I_Agree_To_Permanently_Delete_This_Account_And_Are_Willing_To_Loose_All_Data_Associated_With_it!" ]]; then echo "You need to agree to the permanent deletion by entering to full string shown in the usage."; echo "${USAGE}"; exit; fi
    printf "${TIMESTAMP} ${0} delete-account ${2} "
    delete-account ${2}
    ;;

update-note)
    USAGE="Usage: ${0} update-note foo@foo.com \'My wonderfull note.\'"
    if [[ -z ${2+x} ]]; then echo "Account email missing."; echo "${USAGE}"; exit; fi
    if [[ -z ${3+x} ]]; then echo "Note missing."; echo "${USAGE}"; exit; fi
    printf "${TIMESTAMP} ${0} update-note ${2} ${3} "
    update-note ${2} "${3}"
    ;;

update-storage)
    USAGE="Usage: ${0} update-storage foo@foo.com {Storage in GB. Example: 5 for 5 GB}"
    if [[ -z ${2+x} ]]; then echo "Account email missing."; echo "${USAGE}"; exit; fi
    if [[ -z ${3+x} ]]; then echo "Storage amount missing."; echo "${USAGE}"; exit; fi
    if [[ ! ${3} =~ ^[0-9]+$ ]]; then echo "Storage amount must be given as number."; echo "${USAGE}"; exit; fi
    printf "${TIMESTAMP} ${0} update-storage ${2} ${3} "
    STORAGE_SPACE="$((${3}*1073741824*1))"
    update-storage ${2} ${STORAGE_SPACE}
    ;;

list-user-quota)
    printf "${TIMESTAMP} ${0} list-user-quota "
    list-user-quota
    ;;
    
backup-database)
    printf "${TIMESTAMP} ${0} backup-database "
    backup-database
    ;;

check-library-integrity)
    USAGE="Usage: ${0} check-library-integrity library-id"
    printf "${TIMESTAMP} ${0} check-library-integrity ${2} "
    if [[ -z ${2+x} ]]; then echo "Library ID missing."; echo "${USAGE}"; exit; fi
    check-library-integrity
    ;;

repair-library-integrity)
    USAGE="Usage: ${0} repair-library-integrity library-id"
    printf "${TIMESTAMP} ${0} repair-library-integrity ${2} "
    if [[ -z ${2+x} ]]; then echo "Library ID missing."; echo "${USAGE}"; exit; fi
    repair-library-integrity
    ;;

enable-library-sync-after-repair)
    USAGE="Usage: ${0} enable-library-sync-after-repair library-id"
    printf "${TIMESTAMP} ${0} enable-library-sync-after-repair ${2} "
    if [[ -z ${2+x} ]]; then echo "Library ID missing."; echo "${USAGE}"; exit; fi
    enable-library-sync-after-repair ${2}
    ;;

export-library-to-filesystem)
    USAGE="Usage: ${0} export-library-to-filesystem library-id restore-path "
    # FIXME Add check if given value is a directory which pre-exists or needs to be created manually.
    # If it pre-exists and contains content, we probably should abort the export since it might overwrite
    # the existing content. Not sure if the export creates the folder automatically or if we need to
    # create it prior to the export of unencrypted libraries.
    printf "${TIMESTAMP} ${0} export-library-to-filesystem ${2} ${3}"
    if [[ -z ${2+x} ]]; then echo "Library ID missing."; echo "${USAGE}"; exit; fi
    if [[ -z ${3+x} ]]; then echo "Restore location missing."; echo "${USAGE}"; exit; fi
    export-library-to-filesystem ${2} ${3}
    ;;

install-seafile-professional-on-debian)
    USAGE="Usage: ${0} install-seafile-professional-on-debian 'YES,_This_Is_A_New_Server_And_No_Harm_Will_Be_Done_If_Something_Goes_Wrong!'"
    if [[ ! ${2} = "YES,_This_Is_A_New_Server_And_No_Harm_Will_Be_Done_If_Something_Goes_Wrong!" ]]; then echo "You need to agree that you are running this on a fresh server and no harm will be done if something goes wrong."; echo "${USAGE}"; exit; fi
    printf "${TIMESTAMP} ${0} install-seafile-professional-on-debian \n"
    seafile-server-professional-installation
    seafile-server-abort-if-professional-sources-missing
    seafile-server-abort-if-operating-system-not-supported
    seafile-server-abort-if-installer-not-root
    seafile-server-abort-if-user-exist
    seafile-server-abort-if-directory-exist
    create-locales
    update-operating-system
    system-utils
    chrony
    ufw-firewall
    fail2ban
    postfix
    unattended-upgrades
    seafile-server-requirements
    nginx-org
    nginx
    self-signed-certificate-for-nginx
    restart-nginx
    mariadb
    seafile-server-autostart
    seafile-server-user
    seafile-server-install-dir
    retrieve-seafile-sources
    create-seafile-database
    import-seahub-database-structure
    seafile-server-setup
    seafile-server-logrotate
    seafile-server-start
    seafile-server-change-address
    seafile-server-summary
    ;;

*)
    echo "Usage: ${0} { check-my-account-info | get-account-info | create-account | update-password | enable-admin | disable-admin | activate-account | deactivate-account | migrate-account | delete-account | update-note | update-storage | backup-database | check-library-integrity | repair-library-integrity | enable-library-sync-after-repair | export-library-to-filesystem | install-seafile-professional-on-debian }"
    exit 2
    ;;

esac
) 2>&1 | sed 's/  */ /g' | tee -a ~/$(basename ${0}_${ADDRESS}).log
chmod 600 ~/$(basename ${0}_${ADDRESS}).log
