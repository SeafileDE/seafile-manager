#!/bin/bash
#
# Copyright 2015, Alexander Jackson <alexander.jackson@seafile.de>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Uncomment to run in verbose mode
#set -x

function list-groups {
# List Groups
#
# GET ${PROTO}://${ADDRESS}/api2/groups/
#
#
# Sample request
#
curl -w "\n" -H 'Authorization: Token ${TOKEN}' "${PROTO}://${ADDRESS}/api2/groups/"
#
# Sample response
#
#    {
#        "replynum": 0,
#        "groups": [
#            {
#                "ctime": 1398134171327948,
#                "creator": "foo@foo.com",
#                "msgnum": 0,
#                "mtime": 1398231100,
#                "id": 1,
#                "name": "lian"
#            },
#            {
#                "ctime": 1398236081042441,
#                "creator": "foo@foo.com",
#                "msgnum": 0,
#                "mtime": 0,
#                "id": 2,
#                "name": "123"
#            }
#        ]
#    }
}


function add-a-group {
# Add A Group
#
# PUT ${PROTO}://${ADDRESS}/api2/groups/
#
# Request parameters
#
# group_name
#
# Sample request
#
curl -w "\n" -X PUT -d "group_name=newgroup" -H 'Authorization: Token ${TOKEN}' "${PROTO}://${ADDRESS}/api2/groups/"
#
# Sample response
#
#    {"group_id": 3, "success": true}
#
# Errors
#
# 400 There is already a group with that name.
}


function delete-group {
# Delete Group
#
# DELETE ${PROTO}://${ADDRESS}/api2/groups/{group_id}/
#
# Request parameters
#
# None
#
# Sample request
#
curl -w "\n" -X DELETE -H 'Authorization: Token ${TOKEN}' "${PROTO}://${ADDRESS}/api2/groups/1/"
#
# Success
#
# 200 if everything is fine.
#
# Errors
#
# 400 if ad group id format
# 404 if Group not found
# 403 if Forbid to delete group
# 520 if Failed to remove group (generic error)
}


function rename-group {
# Rename Group
#
# POST ${PROTO}://${ADDRESS}/api2/groups/{group_id}/
#
# Request parameters
#
# operation (value must be 'rename')
# newname (the new name for the group)
#
# Sample request
#
curl -w "\n" -d "operation=rename&newname=pinkfloyd_lovers" -H 'Authorization: Token ${TOKEN}' "${PROTO}://${ADDRESS}/api2/groups/1/"
#
# Success
#
#   200 if everything is fine.
#
# Errors
#
# 404 if Group not found
# 403 if Forbid to rename group
# 400 if Newname is missing or if Group name is not valid of if There is already a group with that name or Operation can only be rename.
}



# Group Member


function group-member {
# Add A Group Member
#
# PUT ${PROTO}://${ADDRESS}/api2/groups/{group_id}/members/
#
# Request parameters
#
# user_name
#
# Sample request
#
curl -w "\n" -X PUT -d "user_name=foo@foo.com"-H 'Authorization: Token ${TOKEN}' "${PROTO}://${ADDRESS}/api2/groups/1/members/"
#
# Sample response
#
#    {"success": true}
#
# Errors
#
# 400 invalid group id
# 403 only administrators can add group members
# 404 unable to find group
}


function delete-a-group-member {
# Delete A Group Member
#
# DELETE ${PROTO}://${ADDRESS}/api2/groups/{group_id}/members/
#
# Request parameters
#
# user_name
#
# Sample request
#
curl -w "\n" -X DELETE -d "user_name=foo@foo.com" -H 'Authorization: Token ${TOKEN}' "${PROTO}://${ADDRESS}/api2/groups/1/members/"
#
# Sample response
#
#    {"success": true}
#
# Errors
#
# 400 invalid group id
# 403 only administrators can remove group members
# 404 unable to find group
}



# Group Message


function get-group-messages {
# Get Group Messages
#
# GET ${PROTO}://${ADDRESS}/api2/group/msgs/{group_id}/
#
# Request parameters
#
# group_id
#
# Sample request
#
curl -w "\n" -H 'Authorization: Token ${TOKEN}' "${PROTO}://${ADDRESS}/api2/group/msgs/1/"
#
# Sample response
#
#    {
#        "next_page": -1,
#        "msgs": [
#            {
#                "reply_cnt": 0,
#                "timestamp": 1398230602,
#                "replies": [],
#                "from_email": "foo@foo.com",
#                "msgid": 1,
#                "msg": "test discuss",
#                "nickname": "user"
#            }
#        ]
#    }
}


function get-group-message-detail {
# Get Group Message Detail
#
# GET ${PROTO}://${ADDRESS}/api2/group/{group_id}/msg/{msg_id}/
#
# Request parameters
#
# group_id
# msg_id
#
# Sample request
#
curl -w "\n" -H 'Authorization: Token ${TOKEN}' "${PROTO}://${ADDRESS}/api2/group/1/msg/1/"
#
# Sample response
#
#    {
#        "reply_cnt": 2,
#        "timestamp": 1398230602,
#        "replies": [
#            {
#                "msg": "this is another test",
#                "timestamp": 1398232319,
#                "nickname": "user",
#                "msgid": 1,
#                "from_email": "foo@foo.com"
#            },
#            {
#                "msg": "this is another test",
#                "timestamp": 1398232508,
#                "nickname": "user",
#                "msgid": 3,
#                "from_email": "foo@foo.com"
#            }
#        ],
#        "from_email": "foo@foo.com",
#        "msgid": 1,
#        "msg": "test discuss",
#        "nickname": "user"
#    }
#
# Errors
#
# 404 message not found
}


function send-a-group-message {
# Send A Group Message
#
# POST ${PROTO}://${ADDRESS}/api2/group/msgs/{group_id}/
#
# Request parameters
#
# message
# group_id
# repo_id(optional)
# path(optional)
#
# Sample request
#
curl -w "\n" -d "message=this is another test&repo_id=c7436518-5f46-4296-97db-2fcba4c8c8db&path=/123.md" -H 'Authorization: Token ${TOKEN}' "${PROTO}://${ADDRESS}/api2/group/msgs/1/"
#
# Sample response
#
#    {
#        "msgid": 3
#    }
}


function reply-a-group-message {
# Reply A Group Message
#
# POST ${PROTO}://${ADDRESS}/api2/group/{group_id}/msg/{msg_id}
#
# Request parameters
#
# group_id
# msg_id
# message
#
# Sample request
#
curl -w "\n" -d "message=this is a reply" -H 'Authorization: Token ${TOKEN}' "${PROTO}://${ADDRESS}/api2/group/1/msg/1/"
#
# Sample response
#
#    {
#        "msgid": 3
#    }
#
# Errors
#
# 404 message not found
}


function get-group-message-replies {
# Get Group Message Replies
#
# GET ${PROTO}://${ADDRESS}/api2/new_replies/
#
#
# Sample request
#
curl -w "\n" -H 'Authorization: Token ${TOKEN}' "${PROTO}://${ADDRESS}/api2/new_replies/"
#
# Sample response
#
#    [
#        {
#            "reply_cnt": 1,
#            "timestamp": 1398231100,
#            "replies": [
#                {
#                    "msg": "@user test reply",
#                    "timestamp": 1398234493,
#                    "nickname": "123",
#                    "msgid": 5,
#                    "from_email": "foo@foo.com"
#                }
#            ],
#            "from_email": "foo@foo.com",
#            "att": {
#                "repo": "c7436518-5f46-4296-97db-2fcba4c8c8db",
#                "path": "/123.md",
#                "type": "file",
#                "src": "recommend"
#            },
#            "msgid": 3,
#            "msg": "this is another test",
#            "nickname": "user"
#        }
#    ]
#
# Share
}
